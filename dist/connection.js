import { LOCAL_CREATOR, lscQuestConnections } from "./quest";
import { Client } from "colyseus.js";
import { DEBUG, LSCQUEST_EVENTS } from "./definitions";
import { lscQuestEvent, lscQuestUserData, pendingQuestConnections } from "./quest";
import { getPlayer } from "@dcl/sdk/players";
import { getRealm } from "~system/Runtime";
import { engine } from "@dcl/sdk/ecs";
let player;
function setLSCQuestListeners(room, userId) {
    room.onMessage(LSCQUEST_EVENTS.QUEST_CONNECTION, (info) => {
        console.log('quest connection ', info);
        lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_CONNECTION, info);
    });
    room.onMessage(LSCQUEST_EVENTS.QUEST_ERROR, (info) => {
        console.log('quest error ', info);
        lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_ERROR, info);
    });
    room.onMessage(LSCQUEST_EVENTS.QUEST_DATA, (info) => {
        console.log('user quest data ', info);
        if (info.userQuestInfo) {
            lscQuestUserData.set(info.questId, info.userQuestInfo);
        }
        lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_DATA, info);
    });
    room.onMessage(LSCQUEST_EVENTS.QUEST_STARTED, (info) => {
        console.log('started quest ', info);
        lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_STARTED, info);
    });
    room.onMessage(LSCQUEST_EVENTS.QUEST_COMPLETE, (info) => {
        console.log('complete quest ', info);
        if (info.userQuestInfo) {
            lscQuestUserData.set(info.questId, info.userQuestInfo);
        }
        else {
            let userQuestData = lscQuestUserData.get(info.questId);
            if (userQuestData) {
                userQuestData.completed = true;
            }
        }
        lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_COMPLETE, info);
    });
    room.onMessage(LSCQUEST_EVENTS.QUEST_END, (info) => {
        console.log('ended quest ', info);
        lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_END, info);
    });
    room.onMessage(LSCQUEST_EVENTS.QUEST_UPDATE, (info) => {
        console.log('update quest ', info);
        lscQuestUserData.set(userId, info);
        lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_UPDATE, info);
    });
    room.onMessage(LSCQUEST_EVENTS.QUEST_STEP_COMPLETE, (info) => {
        console.log('step complete quest ', info);
        if (info.userQuestInfo) {
            lscQuestUserData.set(info.questId, info.userQuestInfo);
        }
        else {
            let userQuestData = lscQuestUserData.get(info.questId);
            if (userQuestData) {
                let step = userQuestData.steps.find((step) => step.stepId === info.stepId);
                if (step) {
                    step.completed = true;
                }
            }
        }
        lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_STEP_COMPLETE, info);
    });
    room.onMessage(LSCQUEST_EVENTS.QUEST_TASK_COMPLETE, (info) => {
        console.log('task complete quest ', info);
        if (info.userQuestInfo) {
            lscQuestUserData.set(info.questId, info.userQuestInfo);
        }
        else {
            let userQuestData = lscQuestUserData.get(info.questId);
            if (userQuestData) {
                let step = userQuestData.steps.find((step) => step.stepId === info.stepId);
                if (step) {
                    let task = step.tasks.find((task) => task.taskId === info.taskId);
                    if (task) {
                        task.count++;
                        task.completed = true;
                    }
                }
            }
        }
        lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_TASK_COMPLETE, info);
    });
}
let time = 0;
export function CheckPlayerSystem(dt) {
    if (time > 0) {
        time -= dt;
    }
    else {
        player = getPlayer();
        if (!player) {
            time = 1;
        }
        else {
            engine.removeSystem(CheckPlayerSystem);
        }
    }
}
export function ConnectQuestSystem() {
    if (!player)
        return;
    if (pendingQuestConnections.length > 0) {
        let pendingQuestId = "" + pendingQuestConnections.shift();
        makeQuestConnection(pendingQuestId);
    }
}
async function makeQuestConnection(questId) {
    const realm = await getRealm({});
    const options = {
        userId: player.userId,
        name: player.name,
        realm: LOCAL_CREATOR ? "local-testing" : realm.realmInfo?.baseUrl,
        questId: questId,
    };
    let client = new Client(DEBUG ?
        { hostname: 'localhost', secure: false, port: 5353 } :
        { hostname: 'angzaar-plaza.dcl-iwb.co', pathname: '/ws', secure: true });
    try {
        const room = await client.joinOrCreate('angzaar_questing', options);
        lscQuestConnections.set(questId, room);
        setLSCQuestListeners(room, player.userId);
        room.onLeave((code, reason) => {
            console.log('left quest room', questId, code, reason);
            lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_DISCONNECT, { questId, code, reason });
        });
        return room;
    }
    catch (error) {
        console.error('Error connecting to LSC Quest System', error);
        throw error;
    }
}
//# sourceMappingURL=data:application/json;base64,