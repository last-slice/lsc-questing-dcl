import { engine, Material, MeshRenderer, TextShape, Transform } from '@dcl/sdk/ecs';
import { Color4, Vector3 } from '@dcl/sdk/math';
import { getPlayer } from "@dcl/sdk/players";
import { getRealm } from '~system/Runtime';
import { Client } from 'colyseus.js';
import mitt from 'mitt';
import './polyfill';
export var LSCQUEST_EVENTS;
(function (LSCQUEST_EVENTS) {
    LSCQUEST_EVENTS["QUEST_CONNECTION"] = "QUEST_CONNECTION";
    LSCQUEST_EVENTS["QUEST_ERROR"] = "QUEST_ERROR";
    LSCQUEST_EVENTS["QUEST_DATA"] = "QUEST_DATA";
    LSCQUEST_EVENTS["QUEST_STARTED"] = "QUEST_STARTED";
    LSCQUEST_EVENTS["QUEST_COMPLETE"] = "QUEST_COMPLETE";
    LSCQUEST_EVENTS["QUEST_END"] = "QUEST_END";
    LSCQUEST_EVENTS["QUEST_UPDATE"] = "QUEST_UPDATE";
    LSCQUEST_EVENTS["QUEST_DISCONNECT"] = "QUEST_DISCONNECT";
    LSCQUEST_EVENTS["QUEST_ACTION"] = "QUEST_ACTION";
    LSCQUEST_EVENTS["QUEST_START"] = "QUEST_START";
    LSCQUEST_EVENTS["QUEST_STEP_COMPLETE"] = "STEP_COMPLETE";
    LSCQUEST_EVENTS["QUEST_TASK_COMPLETE"] = "TASK_COMPLETE";
})(LSCQUEST_EVENTS || (LSCQUEST_EVENTS = {}));
const DEBUG = false;
let LOCAL_CREATOR = false;
let player;
let pendingQuestConnections = [];
export const lscQuestEvent = mitt();
export const lscQuestConnections = new Map();
export const lscQuestUserData = new Map();
export async function LSCQuestLocalCreator(value) {
    LOCAL_CREATOR = value;
}
export async function LSCQuestConnect(questId) {
    console.log('connecting to quest', questId);
    engine.addSystem(CheckPlayerSystem);
    engine.addSystem(ConnectQuestSystem);
    if (lscQuestConnections.has(questId))
        return;
    pendingQuestConnections.push(questId);
}
export function LSCQuestStart(questId) {
    let questConnection = lscQuestConnections.get(questId);
    if (!questConnection)
        return;
    try {
        questConnection.send(LSCQUEST_EVENTS.QUEST_START, { questId });
    }
    catch (e) {
        console.log('error sending quest action', e);
    }
}
export function LSCQuestAction(questId, stepId, taskId) {
    let questConnection = lscQuestConnections.get(questId);
    if (!questConnection)
        return;
    try {
        questConnection.send(LSCQUEST_EVENTS.QUEST_ACTION, { questId, stepId, taskId, metaverse: "DECENTRALAND" });
    }
    catch (e) {
        console.log('error sending quest action', e);
    }
}
function setLSCQuestListeners(room, userId) {
    room.onMessage(LSCQUEST_EVENTS.QUEST_CONNECTION, (info) => {
        console.log('quest connection ', info);
        lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_CONNECTION, info);
    });
    room.onMessage(LSCQUEST_EVENTS.QUEST_ERROR, (info) => {
        console.log('quest error ', info);
        lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_ERROR, info);
    });
    room.onMessage(LSCQUEST_EVENTS.QUEST_DATA, (info) => {
        console.log('user quest data ', info);
        if (info.userQuestInfo) {
            lscQuestUserData.set(info.questId, info.userQuestInfo);
        }
        lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_DATA, info);
    });
    room.onMessage(LSCQUEST_EVENTS.QUEST_STARTED, (info) => {
        console.log('started quest ', info);
        lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_STARTED, info);
    });
    room.onMessage(LSCQUEST_EVENTS.QUEST_COMPLETE, (info) => {
        console.log('complete quest ', info);
        if (info.userQuestInfo) {
            lscQuestUserData.set(info.questId, info.userQuestInfo);
        }
        else {
            let userQuestData = lscQuestUserData.get(info.questId);
            if (userQuestData) {
                userQuestData.completed = true;
            }
        }
        lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_COMPLETE, info);
    });
    room.onMessage(LSCQUEST_EVENTS.QUEST_END, (info) => {
        console.log('ended quest ', info);
        lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_END, info);
    });
    room.onMessage(LSCQUEST_EVENTS.QUEST_UPDATE, (info) => {
        console.log('update quest ', info);
        lscQuestUserData.set(userId, info);
        lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_UPDATE, info);
    });
    room.onMessage(LSCQUEST_EVENTS.QUEST_STEP_COMPLETE, (info) => {
        console.log('step complete quest ', info);
        if (info.userQuestInfo) {
            lscQuestUserData.set(info.questId, info.userQuestInfo);
        }
        else {
            let userQuestData = lscQuestUserData.get(info.questId);
            if (userQuestData) {
                let step = userQuestData.steps.find((step) => step.stepId === info.stepId);
                if (step) {
                    step.completed = true;
                }
            }
        }
        lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_STEP_COMPLETE, info);
    });
    room.onMessage(LSCQUEST_EVENTS.QUEST_TASK_COMPLETE, (info) => {
        console.log('task complete quest ', info);
        if (info.userQuestInfo) {
            lscQuestUserData.set(info.questId, info.userQuestInfo);
        }
        else {
            let userQuestData = lscQuestUserData.get(info.questId);
            if (userQuestData) {
                let step = userQuestData.steps.find((step) => step.stepId === info.stepId);
                if (step) {
                    let task = step.tasks.find((task) => task.taskId === info.taskId);
                    if (task) {
                        task.count++;
                        task.completed = true;
                    }
                }
            }
        }
        lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_TASK_COMPLETE, info);
    });
}
let time = 0;
function CheckPlayerSystem(dt) {
    if (time > 0) {
        time -= dt;
    }
    else {
        player = getPlayer();
        if (!player) {
            time = 1;
        }
        else {
            engine.removeSystem(CheckPlayerSystem);
        }
    }
}
function ConnectQuestSystem() {
    if (!player)
        return;
    if (pendingQuestConnections.length > 0) {
        let pendingQuestId = "" + pendingQuestConnections.shift();
        makeQuestConnection(pendingQuestId);
    }
}
async function makeQuestConnection(questId) {
    const realm = await getRealm({});
    const options = {
        userId: player.userId,
        name: player.name,
        realm: LOCAL_CREATOR ? "local-testing" : realm.realmInfo?.baseUrl,
        questId: questId,
    };
    let client = new Client(DEBUG ?
        { hostname: 'localhost', secure: false, port: 5353 } :
        { hostname: 'angzaar-plaza.dcl-iwb.co', pathname: '/ws', secure: true });
    try {
        const room = await client.joinOrCreate('angzaar_questing', options);
        lscQuestConnections.set(questId, room);
        setLSCQuestListeners(room, player.userId);
        room.onLeave((code, reason) => {
            console.log('left quest room', questId, code, reason);
            lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_DISCONNECT, { questId, code, reason });
        });
        return room;
    }
    catch (error) {
        console.error('Error connecting to LSC Quest System', error);
        throw error;
    }
}
export function LSCQuestLeaderboard(questId, transform, updateInterval, limit, order = 'asc', sortBy = 'elapsedTime', completed = true, showBackground = true, title = "Leaderboard") {
    let leaderboard = engine.addEntity();
    Transform.create(leaderboard, transform);
    const rowWidth = 3;
    const rowHeight = 0.4;
    function formatScoreType(type) {
        if (type === 'elapsedTime')
            return 'Time';
        return type.charAt(0).toUpperCase() + type.slice(1);
    }
    const titleEntity = engine.addEntity();
    Transform.create(titleEntity, {
        parent: leaderboard,
        position: Vector3.create(0, 0.6, 0)
    });
    TextShape.create(titleEntity, {
        text: title,
        fontSize: 2.5,
        textAlign: 4
    });
    const leftPos = -1.2;
    const centerPos = 0;
    const rightPos = 1.2;
    const headerEntity = engine.addEntity();
    Transform.create(headerEntity, {
        parent: leaderboard,
        position: Vector3.create(0, 0.2, 0)
    });
    const headerBgEntity = engine.addEntity();
    Transform.create(headerBgEntity, {
        parent: headerEntity,
        position: Vector3.create(0, 0, 0.03),
        scale: Vector3.create(rowWidth, rowHeight, 1)
    });
    MeshRenderer.setPlane(headerBgEntity);
    Material.setPbrMaterial(headerBgEntity, {
        albedoColor: Color4.create(0 / 255, 255 / 255, 213 / 255, 1)
    });
    const rankHeaderEntity = engine.addEntity();
    Transform.create(rankHeaderEntity, {
        parent: headerEntity,
        position: Vector3.create(leftPos, 0, 0.02)
    });
    TextShape.create(rankHeaderEntity, {
        text: "Rank",
        fontSize: 1.5,
        textAlign: 4
    });
    const nameHeaderEntity = engine.addEntity();
    Transform.create(nameHeaderEntity, {
        parent: headerEntity,
        position: Vector3.create(centerPos - 0.4, 0, 0.02)
    });
    TextShape.create(nameHeaderEntity, {
        text: "Player",
        fontSize: 1.5,
        textAlign: 3
    });
    const scoreHeaderEntity = engine.addEntity();
    Transform.create(scoreHeaderEntity, {
        parent: headerEntity,
        position: Vector3.create(rightPos, 0, 0.02)
    });
    TextShape.create(scoreHeaderEntity, {
        text: formatScoreType(sortBy),
        fontSize: 1.5,
        textAlign: 4
    });
    const leaderboardRows = [];
    for (let i = 0; i < limit; i++) {
        const rowEntity = engine.addEntity();
        Transform.create(rowEntity, {
            parent: leaderboard,
            position: Vector3.create(0, -i * 0.5 - 0.2, 0)
        });
        const backgroundEntity = engine.addEntity();
        if (showBackground) {
            Transform.create(backgroundEntity, {
                parent: rowEntity,
                position: Vector3.create(0, 0, 0.01),
                scale: Vector3.create(rowWidth, rowHeight, 1)
            });
            MeshRenderer.setPlane(backgroundEntity);
            Material.setPbrMaterial(backgroundEntity, {
                albedoColor: i % 2 === 0 ?
                    Color4.create(18 / 255, 23 / 255, 37 / 255, 1) :
                    Color4.create(26 / 255, 34 / 255, 53 / 255, 1)
            });
        }
        else {
            Transform.create(backgroundEntity, {
                parent: rowEntity,
                scale: Vector3.Zero()
            });
        }
        const rankEntity = engine.addEntity();
        Transform.create(rankEntity, {
            parent: rowEntity,
            position: Vector3.create(leftPos, 0, 0)
        });
        TextShape.create(rankEntity, { text: `#${i + 1}`, fontSize: 1.5 });
        const profileEntity = engine.addEntity();
        Transform.create(profileEntity, {
            parent: rowEntity,
            position: Vector3.create(centerPos - 0.8, 0, 0),
            scale: Vector3.create(0.3, 0.3, 0.3)
        });
        MeshRenderer.setPlane(profileEntity);
        Material.setPbrMaterial(profileEntity, {
            texture: Material.Texture.Avatar({
                userId: '',
            }),
        });
        const nameEntity = engine.addEntity();
        Transform.create(nameEntity, {
            parent: rowEntity,
            position: Vector3.create(centerPos - 0.4, 0, 0)
        });
        TextShape.create(nameEntity, { text: `Name`, fontSize: 1.5, textAlign: 3 });
        const scoreEntity = engine.addEntity();
        Transform.create(scoreEntity, {
            parent: rowEntity,
            position: Vector3.create(rightPos, 0, 0)
        });
        TextShape.create(scoreEntity, { text: `Score`, fontSize: 1.5 });
        leaderboardRows.push({
            rank: i + 1,
            rowEntity,
            backgroundEntity,
            rankEntity,
            profileEntity,
            nameEntity,
            scoreEntity
        });
    }
    let time = 0;
    function leaderboardUpdate(dt) {
        if (time > 0) {
            time -= dt;
        }
        else {
            time = updateInterval;
            updateLSCQuestLeaderboard();
        }
    }
    async function updateLSCQuestLeaderboard() {
        try {
            const playerData = getPlayer();
            const playerID = playerData ? playerData.userId : '';
            const playerName = playerData?.name || 'You';
            let params = [`completed=${completed}`, `order=${order}`, `limit=${limit}`, `sortBy=${sortBy}`];
            let response = await fetch(`http://localhost:5353/api/quests/${questId}/users?` + params.join('&'));
            let data = await response.json();
            for (let i = 0; i < leaderboardRows.length; i++) {
                const row = leaderboardRows[i];
                const rowData = data[i];
                if (rowData) {
                    if (!Transform.has(row.rowEntity))
                        continue;
                    Transform.getMutable(row.rowEntity).scale = Vector3.create(1, 1, 1);
                    if (showBackground) {
                        Transform.getMutable(row.backgroundEntity).scale = Vector3.create(rowWidth, rowHeight, 1);
                    }
                    const rankText = `#${i + 1}`;
                    TextShape.getMutable(row.rankEntity).text = rankText;
                    Material.setPbrMaterial(row.profileEntity, {
                        texture: Material.Texture.Avatar({
                            userId: rowData.userId,
                        }),
                    });
                    const name = rowData.name || 'Anonymous';
                    TextShape.getMutable(row.nameEntity).text = name;
                    let scoreText = '';
                    if (sortBy === 'elapsedTime') {
                        const ms = rowData.elapsedTime * 1000;
                        const seconds = Math.floor(ms / 1000);
                        const minutes = Math.floor(seconds / 60);
                        const hours = Math.floor(minutes / 60);
                        if (hours > 0) {
                            scoreText = `${hours}h ${minutes % 60}m`;
                        }
                        else if (minutes > 0) {
                            scoreText = `${minutes}m ${seconds % 60}s`;
                        }
                        else {
                            scoreText = `${seconds}s`;
                        }
                    }
                    else {
                        scoreText = rowData[sortBy]?.toString() || '0';
                    }
                    TextShape.getMutable(row.scoreEntity).text = scoreText;
                }
                else {
                    if (Transform.has(row.rowEntity)) {
                        Transform.getMutable(row.rowEntity).scale = Vector3.Zero();
                        if (showBackground) {
                            Transform.getMutable(row.backgroundEntity).scale = Vector3.Zero();
                        }
                    }
                }
            }
        }
        catch (e) {
            console.log('error updating quest leaderboard', e);
        }
    }
    engine.addSystem(leaderboardUpdate);
}
//# sourceMappingURL=data:application/json;base64,