import { engine, Material, MeshRenderer, TextShape, Transform } from '@dcl/sdk/ecs';
import { Color4, Vector3 } from '@dcl/sdk/math';
import { getPlayer } from "@dcl/sdk/players";
import { getRealm } from '~system/Runtime';
import { Client } from 'colyseus.js';
import mitt from 'mitt';
import './polyfill';
const DEBUG = false;
let player;
let pendingQuestConnections = [];
export const lscQuestEvent = mitt();
export var LSCQUEST_EVENTS;
(function (LSCQUEST_EVENTS) {
    LSCQUEST_EVENTS["QUEST_CONNECTION"] = "QUEST_CONNECTION";
    LSCQUEST_EVENTS["QUEST_ERROR"] = "QUEST_ERROR";
    LSCQUEST_EVENTS["QUEST_DATA"] = "QUEST_DATA";
    LSCQUEST_EVENTS["QUEST_STARTED"] = "QUEST_STARTED";
    LSCQUEST_EVENTS["QUEST_COMPLETE"] = "QUEST_COMPLETE";
    LSCQUEST_EVENTS["QUEST_END"] = "QUEST_END";
    LSCQUEST_EVENTS["QUEST_UPDATE"] = "QUEST_UPDATE";
    LSCQUEST_EVENTS["QUEST_DISCONNECT"] = "QUEST_DISCONNECT";
    LSCQUEST_EVENTS["QUEST_ACTION"] = "QUEST_ACTION";
    LSCQUEST_EVENTS["QUEST_START"] = "QUEST_START";
    LSCQUEST_EVENTS["QUEST_STEP_COMPLETE"] = "STEP_COMPLETE";
    LSCQUEST_EVENTS["QUEST_TASK_COMPLETE"] = "TASK_COMPLETE";
})(LSCQUEST_EVENTS || (LSCQUEST_EVENTS = {}));
export const lscQuestConnections = new Map();
export const lscQuestUserData = new Map();
export async function LSCQuestConnect(questId) {
    console.log('connecting to quest', questId);
    engine.addSystem(CheckPlayerSystem);
    engine.addSystem(ConnectQuestSystem);
    if (lscQuestConnections.has(questId))
        return;
    pendingQuestConnections.push(questId);
}
export function LSCQuestStart(questId) {
    let questConnection = lscQuestConnections.get(questId);
    if (!questConnection)
        return;
    try {
        questConnection.send(LSCQUEST_EVENTS.QUEST_START, { questId });
    }
    catch (e) {
        console.log('error sending quest action', e);
    }
}
export function LSCQuestAction(questId, stepId, taskId) {
    let questConnection = lscQuestConnections.get(questId);
    if (!questConnection)
        return;
    try {
        questConnection.send(LSCQUEST_EVENTS.QUEST_ACTION, { questId, stepId, taskId, metaverse: "DECENTRALAND" });
    }
    catch (e) {
        console.log('error sending quest action', e);
    }
}
function setLSCQuestListeners(room, userId) {
    room.onMessage(LSCQUEST_EVENTS.QUEST_CONNECTION, (info) => {
        console.log('quest connection ', info);
        lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_CONNECTION, info);
    });
    room.onMessage(LSCQUEST_EVENTS.QUEST_ERROR, (info) => {
        console.log('quest error ', info);
        lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_ERROR, info);
    });
    room.onMessage(LSCQUEST_EVENTS.QUEST_DATA, (info) => {
        console.log('user quest data ', info);
        if (info.userQuestInfo) {
            lscQuestUserData.set(info.questId, info.userQuestInfo);
        }
        lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_DATA, info);
    });
    room.onMessage(LSCQUEST_EVENTS.QUEST_STARTED, (info) => {
        console.log('started quest ', info);
        lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_STARTED, info);
    });
    room.onMessage(LSCQUEST_EVENTS.QUEST_COMPLETE, (info) => {
        console.log('complete quest ', info);
        if (info.userQuestInfo) {
            lscQuestUserData.set(info.questId, info.userQuestInfo);
        }
        else {
            let userQuestData = lscQuestUserData.get(info.questId);
            if (userQuestData) {
                userQuestData.completed = true;
            }
        }
        lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_COMPLETE, info);
    });
    room.onMessage(LSCQUEST_EVENTS.QUEST_END, (info) => {
        console.log('ended quest ', info);
        lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_END, info);
    });
    room.onMessage(LSCQUEST_EVENTS.QUEST_UPDATE, (info) => {
        console.log('update quest ', info);
        lscQuestUserData.set(userId, info);
        lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_UPDATE, info);
    });
    room.onMessage(LSCQUEST_EVENTS.QUEST_STEP_COMPLETE, (info) => {
        console.log('step complete quest ', info);
        if (info.userQuestInfo) {
            lscQuestUserData.set(info.questId, info.userQuestInfo);
        }
        else {
            let userQuestData = lscQuestUserData.get(info.questId);
            if (userQuestData) {
                let step = userQuestData.steps.find((step) => step.stepId === info.stepId);
                if (step) {
                    step.completed = true;
                }
            }
        }
        lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_STEP_COMPLETE, info);
    });
    room.onMessage(LSCQUEST_EVENTS.QUEST_TASK_COMPLETE, (info) => {
        console.log('task complete quest ', info);
        if (info.userQuestInfo) {
            lscQuestUserData.set(info.questId, info.userQuestInfo);
        }
        else {
            let userQuestData = lscQuestUserData.get(info.questId);
            if (userQuestData) {
                let step = userQuestData.steps.find((step) => step.stepId === info.stepId);
                if (step) {
                    let task = step.tasks.find((task) => task.taskId === info.taskId);
                    if (task) {
                        task.count++;
                        task.completed = true;
                    }
                }
            }
        }
        lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_TASK_COMPLETE, info);
    });
}
let time = 0;
function CheckPlayerSystem(dt) {
    if (time > 0) {
        time -= dt;
    }
    else {
        player = getPlayer();
        if (!player) {
            time = 1;
        }
        else {
            engine.removeSystem(CheckPlayerSystem);
        }
    }
}
function ConnectQuestSystem() {
    if (!player)
        return;
    console.log('connecting quest system');
    if (pendingQuestConnections.length > 0) {
        let pendingQuestId = "" + pendingQuestConnections.shift();
        makeQuestConnection(pendingQuestId);
    }
}
async function makeQuestConnection(questId) {
    const realm = await getRealm({});
    const options = {
        userId: player.userId,
        name: player.name,
        realm: realm.realmInfo?.baseUrl,
        questId: questId,
    };
    let client = new Client(DEBUG ?
        { hostname: 'localhost', secure: false, port: 5353 } :
        { hostname: 'angzaar-plaza.dcl-iwb.co', pathname: '/ws', secure: true });
    try {
        const room = await client.joinOrCreate('angzaar_questing', options);
        lscQuestConnections.set(questId, room);
        setLSCQuestListeners(room, player.userId);
        room.onLeave((code, reason) => {
            console.log('left quest room', questId, code, reason);
            lscQuestEvent.emit(LSCQUEST_EVENTS.QUEST_DISCONNECT, { questId, code, reason });
        });
        return room;
    }
    catch (error) {
        console.error('Error connecting to LSC Quest System', error);
        throw error;
    }
}
export function LSCQuestLeaderboard(questId, transform, updateInterval, limit, order = 'asc', sortBy = 'elapsedTime', completed = true, showBackground = true, title = "Leaderboard") {
    let leaderboard = engine.addEntity();
    Transform.create(leaderboard, transform);
    const rowWidth = 3;
    const rowHeight = 0.4;
    function formatScoreType(type) {
        if (type === 'elapsedTime')
            return 'Time';
        return type.charAt(0).toUpperCase() + type.slice(1);
    }
    const titleEntity = engine.addEntity();
    Transform.create(titleEntity, {
        parent: leaderboard,
        position: Vector3.create(0, 0.6, 0)
    });
    TextShape.create(titleEntity, {
        text: title,
        fontSize: 2.5,
        textAlign: 4
    });
    const leftPos = -1.2;
    const centerPos = 0;
    const rightPos = 1.2;
    const headerEntity = engine.addEntity();
    Transform.create(headerEntity, {
        parent: leaderboard,
        position: Vector3.create(0, 0.2, 0)
    });
    const headerBgEntity = engine.addEntity();
    Transform.create(headerBgEntity, {
        parent: headerEntity,
        position: Vector3.create(0, 0, 0.03),
        scale: Vector3.create(rowWidth, rowHeight, 1)
    });
    MeshRenderer.setPlane(headerBgEntity);
    Material.setPbrMaterial(headerBgEntity, {
        albedoColor: Color4.create(0 / 255, 255 / 255, 213 / 255, 1)
    });
    const rankHeaderEntity = engine.addEntity();
    Transform.create(rankHeaderEntity, {
        parent: headerEntity,
        position: Vector3.create(leftPos, 0, 0.02)
    });
    TextShape.create(rankHeaderEntity, {
        text: "Rank",
        fontSize: 1.5,
        textAlign: 4
    });
    const nameHeaderEntity = engine.addEntity();
    Transform.create(nameHeaderEntity, {
        parent: headerEntity,
        position: Vector3.create(centerPos - 0.4, 0, 0.02)
    });
    TextShape.create(nameHeaderEntity, {
        text: "Player",
        fontSize: 1.5,
        textAlign: 3
    });
    const scoreHeaderEntity = engine.addEntity();
    Transform.create(scoreHeaderEntity, {
        parent: headerEntity,
        position: Vector3.create(rightPos, 0, 0.02)
    });
    TextShape.create(scoreHeaderEntity, {
        text: formatScoreType(sortBy),
        fontSize: 1.5,
        textAlign: 4
    });
    const leaderboardRows = [];
    for (let i = 0; i < limit; i++) {
        const rowEntity = engine.addEntity();
        Transform.create(rowEntity, {
            parent: leaderboard,
            position: Vector3.create(0, -i * 0.5 - 0.2, 0)
        });
        const backgroundEntity = engine.addEntity();
        if (showBackground) {
            Transform.create(backgroundEntity, {
                parent: rowEntity,
                position: Vector3.create(0, 0, 0.01),
                scale: Vector3.create(rowWidth, rowHeight, 1)
            });
            MeshRenderer.setPlane(backgroundEntity);
            Material.setPbrMaterial(backgroundEntity, {
                albedoColor: i % 2 === 0 ?
                    Color4.create(18 / 255, 23 / 255, 37 / 255, 1) :
                    Color4.create(26 / 255, 34 / 255, 53 / 255, 1)
            });
        }
        else {
            Transform.create(backgroundEntity, {
                parent: rowEntity,
                scale: Vector3.Zero()
            });
        }
        const rankEntity = engine.addEntity();
        Transform.create(rankEntity, {
            parent: rowEntity,
            position: Vector3.create(leftPos, 0, 0)
        });
        TextShape.create(rankEntity, { text: `#${i + 1}`, fontSize: 1.5 });
        const profileEntity = engine.addEntity();
        Transform.create(profileEntity, {
            parent: rowEntity,
            position: Vector3.create(centerPos - 0.8, 0, 0),
            scale: Vector3.create(0.3, 0.3, 0.3)
        });
        MeshRenderer.setPlane(profileEntity);
        Material.setPbrMaterial(profileEntity, {
            texture: Material.Texture.Avatar({
                userId: '',
            }),
        });
        const nameEntity = engine.addEntity();
        Transform.create(nameEntity, {
            parent: rowEntity,
            position: Vector3.create(centerPos - 0.4, 0, 0)
        });
        TextShape.create(nameEntity, { text: `Name`, fontSize: 1.5, textAlign: 3 });
        const scoreEntity = engine.addEntity();
        Transform.create(scoreEntity, {
            parent: rowEntity,
            position: Vector3.create(rightPos, 0, 0)
        });
        TextShape.create(scoreEntity, { text: `Score`, fontSize: 1.5 });
        leaderboardRows.push({
            rank: i + 1,
            rowEntity,
            backgroundEntity,
            rankEntity,
            profileEntity,
            nameEntity,
            scoreEntity
        });
    }
    let time = 0;
    function leaderboardUpdate(dt) {
        if (time > 0) {
            time -= dt;
        }
        else {
            time = updateInterval;
            updateLSCQuestLeaderboard();
        }
    }
    async function updateLSCQuestLeaderboard() {
        try {
            const playerData = getPlayer();
            const playerID = playerData ? playerData.userId : '';
            const playerName = playerData?.name || 'You';
            let params = [`completed=${completed}`, `order=${order}`, `limit=${limit}`, `sortBy=${sortBy}`];
            let response = await fetch(`http://localhost:5353/api/quests/${questId}/users?` + params.join('&'));
            let data = await response.json();
            console.log('leaderboard data:', data);
            for (let i = 0; i < leaderboardRows.length; i++) {
                const row = leaderboardRows[i];
                const rowData = data[i];
                if (rowData) {
                    if (!Transform.has(row.rowEntity))
                        continue;
                    Transform.getMutable(row.rowEntity).scale = Vector3.create(1, 1, 1);
                    if (showBackground) {
                        Transform.getMutable(row.backgroundEntity).scale = Vector3.create(rowWidth, rowHeight, 1);
                    }
                    const rankText = `#${i + 1}`;
                    TextShape.getMutable(row.rankEntity).text = rankText;
                    Material.setPbrMaterial(row.profileEntity, {
                        texture: Material.Texture.Avatar({
                            userId: rowData.userId,
                        }),
                    });
                    const name = rowData.name || 'Anonymous';
                    TextShape.getMutable(row.nameEntity).text = name;
                    let scoreText = '';
                    if (sortBy === 'elapsedTime') {
                        const ms = rowData.elapsedTime * 1000;
                        const seconds = Math.floor(ms / 1000);
                        const minutes = Math.floor(seconds / 60);
                        const hours = Math.floor(minutes / 60);
                        if (hours > 0) {
                            scoreText = `${hours}h ${minutes % 60}m`;
                        }
                        else if (minutes > 0) {
                            scoreText = `${minutes}m ${seconds % 60}s`;
                        }
                        else {
                            scoreText = `${seconds}s`;
                        }
                    }
                    else {
                        scoreText = rowData[sortBy]?.toString() || '0';
                    }
                    TextShape.getMutable(row.scoreEntity).text = scoreText;
                }
                else {
                    if (Transform.has(row.rowEntity)) {
                        Transform.getMutable(row.rowEntity).scale = Vector3.Zero();
                        if (showBackground) {
                            Transform.getMutable(row.backgroundEntity).scale = Vector3.Zero();
                        }
                    }
                }
            }
        }
        catch (e) {
            console.log('error updating quest leaderboard', e);
        }
    }
    engine.addSystem(leaderboardUpdate);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcXVlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBVSxRQUFRLEVBQUUsWUFBWSxFQUFpQixTQUFTLEVBQUUsU0FBUyxFQUFpQixNQUFNLGNBQWMsQ0FBQTtBQUV6SCxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUMvQyxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFDM0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFBO0FBQzFDLE9BQU8sRUFBRSxNQUFNLEVBQVEsTUFBTSxhQUFhLENBQUE7QUFDMUMsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFBO0FBQ3ZCLE9BQU8sWUFBWSxDQUFBO0FBRW5CLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQTtBQUVuQixJQUFJLE1BQVUsQ0FBQTtBQUNkLElBQUksdUJBQXVCLEdBQVksRUFBRSxDQUFBO0FBRXpDLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxJQUFJLEVBQUUsQ0FBQTtBQUVuQyxNQUFNLENBQU4sSUFBWSxlQWFYO0FBYkQsV0FBWSxlQUFlO0lBQ3pCLHdEQUFxQyxDQUFBO0lBQ3JDLDhDQUEyQixDQUFBO0lBQzNCLDRDQUF5QixDQUFBO0lBQ3pCLGtEQUErQixDQUFBO0lBQy9CLG9EQUFpQyxDQUFBO0lBQ2pDLDBDQUF1QixDQUFBO0lBQ3ZCLGdEQUE2QixDQUFBO0lBQzdCLHdEQUFxQyxDQUFBO0lBQ3JDLGdEQUE2QixDQUFBO0lBQzdCLDhDQUEyQixDQUFBO0lBQzNCLHdEQUFxQyxDQUFBO0lBQ3JDLHdEQUFxQyxDQUFBO0FBQ3ZDLENBQUMsRUFiVyxlQUFlLEtBQWYsZUFBZSxRQWExQjtBQWtDRCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLEdBQUcsRUFBZ0IsQ0FBQTtBQUMxRCxNQUFN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LENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFBO3dCQUcxRCxJQUFJLGNBQWMsRUFBRSxDQUFDOzRCQUNuQixTQUFTLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUE7d0JBQ25FLENBQUM7b0JBQ0gsQ0FBQztnQkFDSCxDQUFDO1lBQ0gsQ0FBQztRQUNILENBQUM7UUFBQyxPQUFNLENBQUssRUFBRSxDQUFDO1lBQ2QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQ0FBa0MsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUNwRCxDQUFDO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtBQUdyQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZW5naW5lLCBFbnRpdHksIE1hdGVyaWFsLCBNZXNoUmVuZGVyZXIsIFRleHRBbGlnbk1vZGUsIFRleHRTaGFwZSwgVHJhbnNmb3JtLCBUcmFuc2Zvcm1UeXBlIH0gZnJvbSAnQGRjbC9zZGsvZWNzJ1xuaW1wb3J0IHsgUmVhY3RFY3NSZW5kZXJlcn0gZnJvbSAnQGRjbC9zZGsvcmVhY3QtZWNzJ1xuaW1wb3J0IHsgQ29sb3I0LCBWZWN0b3IzIH0gZnJvbSAnQGRjbC9zZGsvbWF0aCdcbmltcG9ydCB7Z2V0UGxheWVyfSBmcm9tIFwiQGRjbC9zZGsvcGxheWVyc1wiO1xuaW1wb3J0IHsgZ2V0UmVhbG0gfSBmcm9tICd+c3lzdGVtL1J1bnRpbWUnXG5pbXBvcnQgeyBDbGllbnQsIFJvb20gfSBmcm9tICdjb2x5c2V1cy5qcydcbmltcG9ydCBtaXR0IGZyb20gJ21pdHQnXG5pbXBvcnQgJy4vcG9seWZpbGwnXG5cbmNvbnN0IERFQlVHID0gZmFsc2VcblxubGV0IHBsYXllcjphbnlcbmxldCBwZW5kaW5nUXVlc3RDb25uZWN0aW9uczpzdHJpbmdbXSA9IFtdXG5cbmV4cG9ydCBjb25zdCBsc2NRdWVzdEV2ZW50ID0gbWl0dCgpXG5cbmV4cG9ydCBlbnVtIExTQ1FVRVNUX0VWRU5UUyB7XG4gIFFVRVNUX0NPTk5FQ1RJT04gPSAnUVVFU1RfQ09OTkVDVElPTicsXG4gIFFVRVNUX0VSUk9SID0gJ1FVRVNUX0VSUk9SJyxcbiAgUVVFU1RfREFUQSA9ICdRVUVTVF9EQVRBJyxcbiAgUVVFU1RfU1RBUlRFRCA9ICdRVUVTVF9TVEFSVEVEJyxcbiAgUVVFU1RfQ09NUExFVEUgPSAnUVVFU1RfQ09NUExFVEUnLFxuICBRVUVTVF9FTkQgPSAnUVVFU1RfRU5EJyxcbiAgUVVFU1RfVVBEQVRFID0gJ1FVRVNUX1VQREFURScsXG4gIFFVRVNUX0RJU0NPTk5FQ1QgPSAnUVVFU1RfRElTQ09OTkVDVCcsXG4gIFFVRVNUX0FDVElPTiA9ICdRVUVTVF9BQ1RJT04nLFxuICBRVUVTVF9TVEFSVCA9ICdRVUVTVF9TVEFSVCcsXG4gIFFVRVNUX1NURVBfQ09NUExFVEUgPSAnU1RFUF9DT01QTEVURScsXG4gIFFVRVNUX1RBU0tfQ09NUExFVEUgPSAnVEFTS19DT01QTEVURSdcbn1cblxuaW50ZXJmYWNlIFRhc2tEZWZpbml0aW9uIHtcbiAgdGFza0lkOiBzdHJpbmc7XG4gIHJlcXVpcmVkQ291bnQ6IG51bWJlcjtcbiAgY291bnQ6IG51bWJlcjtcbiAgY29tcGxldGVkOiBib29sZWFuO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBtZXRhdmVyc2U6ICdERUNFTlRSQUxBTkQnIHwgJ0hZUEVSRlknO1xuICBwcmVyZXF1aXNpdGVUYXNrSWRzOiBzdHJpbmdbXTtcbn1cbmludGVyZmFjZSBTdGVwRGVmaW5pdGlvbiB7XG4gIHN0ZXBJZDogc3RyaW5nO1xuICBuYW1lPzogc3RyaW5nO1xuICBjb21wbGV0ZWQ6IGJvb2xlYW47XG4gIHRhc2tzOiBUYXNrRGVmaW5pdGlvbltdO1xuICBwcmVyZXF1aXNpdGVTdGVwSWRzPzogc3RyaW5nW107XG59XG5cbmludGVyZmFjZSBRdWVzdERlZmluaXRpb24ge1xuICAgIHF1ZXN0SWQ6IHN0cmluZztcbiAgICB2ZXJzaW9uOiBudW1iZXI7XG4gICAgZW5hYmxlZDpib29sZWFuLFxuICAgIHF1ZXN0VHlwZTogJ0xJTkVBUicgfCAnT1BFTl9FTkRFRCcgfCAnT05FX1NIT1QnOyBcbiAgICBzdGFydFRyaWdnZXI/OiAnRVhQTElDSVQnIHwgJ0ZJUlNUX1RBU0snO1xuICAgIHRpdGxlPzogc3RyaW5nO1xuICAgIHN0YXJ0VGltZT86IG51bWJlcjtcbiAgICBlbmRUaW1lPzogbnVtYmVyO1xuICAgIGFsbG93UmVwbGF5OiBib29sZWFuO1xuICAgIGNvbXBsZXRlZDogYm9vbGVhbjtcbiAgICBjcmVhdG9yOiBzdHJpbmc7XG4gICAgc3RlcHM6IFN0ZXBEZWZpbml0aW9uW107XG59XG5cbmV4cG9ydCBjb25zdCBsc2NRdWVzdENvbm5lY3Rpb25zID0gbmV3IE1hcDxzdHJpbmcsIFJvb20+KClcbmV4cG9ydCBjb25zdCBsc2NRdWVzdFVzZXJEYXRhID0gbmV3IE1hcDxzdHJpbmcsIFF1ZXN0RGVmaW5pdGlvbj4oKVxuXG4vKipcbiAqIENvbm5lY3QgdG8gYSBRdWVzdCB3aXRoaW4gdGhlIExTQyBRdWVzdCBTeXN0ZW1cbiAqXG4gKiBAcGFyYW0gcXVlc3RJZFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gTFNDUXVlc3RDb25uZWN0KHF1ZXN0SWQ6c3RyaW5nKSB7XG4gIGNvbnNvbGUubG9nKCdjb25uZWN0aW5nIHRvIHF1ZXN0JywgcXVlc3RJZClcbiAgZW5naW5lLmFkZFN5c3RlbShDaGVja1BsYXllclN5c3RlbSlcbiAgZW5naW5lLmFkZFN5c3RlbShDb25uZWN0UXVlc3RTeXN0ZW0pXG5cbiAgaWYobHNjUXVlc3RDb25uZWN0aW9ucy5oYXMocXVlc3RJZCkpICByZXR1cm5cbiAgcGVuZGluZ1F1ZXN0Q29ubmVjdGlvbnMucHVzaChxdWVzdElkKVxufVxuXG4vKipcbiAqIFN0YXJ0IGEgc3BlY2lmaWMgUXVlc3QgaW4gdGhlIExTQyBRdWVzdCBTeXN0ZW1cbiAqXG4gKiBAcGFyYW0gcXVlc3RJZFxuICovXG5leHBvcnQgZnVuY3Rpb24gTFNDUXVlc3RTdGFydChxdWVzdElkOnN0cmluZyl7XG4gIGxldCBxdWVzdENvbm5lY3Rpb24gPSBsc2NRdWVzdENvbm5lY3Rpb25zLmdldChxdWVzdElkKVxuICBpZighcXVlc3RDb25uZWN0aW9uKSAgcmV0dXJuXG5cbiAgdHJ5e1xuICAgIHF1ZXN0Q29ubmVjdGlvbi5zZW5kKExTQ1FVRVNUX0VWRU5UUy5RVUVTVF9TVEFSVCwge3F1ZXN0SWR9KVxuICB9XG4gIGNhdGNoKGU6YW55KXtcbiAgICBjb25zb2xlLmxvZygnZXJyb3Igc2VuZGluZyBxdWVzdCBhY3Rpb24nLCBlKVxuICB9XG59XG5cbi8qKlxuICogUnVuIGEgUXVlc3QgQWN0aW9uIHdpdGhpbiB0aGUgTFNDIFF1ZXN0IFN5c3RlbVxuICpcbiAqIEBwYXJhbSBxdWVzdElkXG4gKiBAcGFyYW0gc3RlcElkXG4gKiBAcGFyYW0gdGFza0lkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBMU0NRdWVzdEFjdGlvbihxdWVzdElkOnN0cmluZywgc3RlcElkOnN0cmluZywgdGFza0lkOnN0cmluZyl7XG4gIGxldCBxdWVzdENvbm5lY3Rpb24gPSBsc2NRdWVzdENvbm5lY3Rpb25zLmdldChxdWVzdElkKVxuICBpZighcXVlc3RDb25uZWN0aW9uKSAgcmV0dXJuXG5cbiAgdHJ5e1xuICAgIHF1ZXN0Q29ubmVjdGlvbi5zZW5kKExTQ1FVRVNUX0VWRU5UUy5RVUVTVF9BQ1RJT04sIHtxdWVzdElkLCBzdGVwSWQsIHRhc2tJZCwgbWV0YXZlcnNlOlwiREVDRU5UUkFMQU5EXCJ9KVxuICB9XG4gIGNhdGNoKGU6YW55KXtcbiAgICBjb25zb2xlLmxvZygnZXJyb3Igc2VuZGluZyBxdWVzdCBhY3Rpb24nLCBlKVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldExTQ1F1ZXN0TGlzdGVuZXJzKHJvb206Um9vbSwgdXNlcklkOnN0cmluZyl7XG4gIHJvb20ub25NZXNzYWdlKExTQ1FVRVNUX0VWRU5UUy5RVUVTVF9DT05ORUNUSU9OLCAoaW5mbzphbnkpPT57XG4gICAgY29uc29sZS5sb2coJ3F1ZXN0IGNvbm5lY3Rpb24gJywgaW5mbylcbiAgICBsc2NRdWVzdEV2ZW50LmVtaXQoTFNDUVVFU1RfRVZFTlRTLlFVRVNUX0NPTk5FQ1RJT04sIGluZm8pXG4gIH0pXG5cbiAgcm9vbS5vbk1lc3NhZ2UoTFNDUVVFU1RfRVZFTlRTLlFVRVNUX0VSUk9SLCAoaW5mbzphbnkpPT57XG4gICAgY29uc29sZS5sb2coJ3F1ZXN0IGVycm9yICcsIGluZm8pXG4gICAgbHNjUXVlc3RFdmVudC5lbWl0KExTQ1FVRVNUX0VWRU5UUy5RVUVTVF9FUlJPUiwgaW5mbylcbiAgfSlcblxuICByb29tLm9uTWVzc2FnZShMU0NRVUVTVF9FVkVOVFMuUVVFU1RfREFUQSwgKGluZm86YW55KT0+e1xuICAgIGNvbnNvbGUubG9nKCd1c2VyIHF1ZXN0IGRhdGEgJywgaW5mbylcbiAgICBpZihpbmZvLnVzZXJRdWVzdEluZm8pe1xuICAgICAgbHNjUXVlc3RVc2VyRGF0YS5zZXQoaW5mby5xdWVzdElkLCBpbmZvLnVzZXJRdWVzdEluZm8pXG4gICAgfVxuICAgIGxzY1F1ZXN0RXZlbnQuZW1pdChMU0NRVUVTVF9FVkVOVFMuUVVFU1RfREFUQSwgaW5mbylcbiAgfSlcblxuICByb29tLm9uTWVzc2FnZShMU0NRVUVTVF9FVkVOVFMuUVVFU1RfU1RBUlRFRCwgKGluZm86YW55KT0+e1xuICAgIGNvbnNvbGUubG9nKCdzdGFydGVkIHF1ZXN0ICcsIGluZm8pXG4gICAgbHNjUXVlc3RFdmVudC5lbWl0KExTQ1FVRVNUX0VWRU5UUy5RVUVTVF9TVEFSVEVELCBpbmZvKVxuICB9KVxuXG4gIHJvb20ub25NZXNzYWdlKExTQ1FVRVNUX0VWRU5UUy5RVUVTVF9DT01QTEVURSwgKGluZm86YW55KT0+e1xuICAgIGNvbnNvbGUubG9nKCdjb21wbGV0ZSBxdWVzdCAnLCBpbmZvKVxuICAgIFxuICAgIC8vIElmIHRoZSBzZXJ2ZXIgc2VudCBjb21wbGV0ZSB1c2VyIHF1ZXN0IGluZm8sIHVzZSBpdCBkaXJlY3RseVxuICAgIGlmIChpbmZvLnVzZXJRdWVzdEluZm8pIHtcbiAgICAgIGxzY1F1ZXN0VXNlckRhdGEuc2V0KGluZm8ucXVlc3RJZCwgaW5mby51c2VyUXVlc3RJbmZvKVxuICAgIH0gXG4gICAgLy8gRmFsbGJhY2sgdG8gb2xkIGJlaGF2aW9yIGlmIHNlcnZlciBkb2Vzbid0IHNlbmQgY29tcGxldGUgZGF0YVxuICAgIGVsc2Uge1xuICAgICAgbGV0IHVzZXJRdWVzdERhdGEgPSBsc2NRdWVzdFVzZXJEYXRhLmdldChpbmZvLnF1ZXN0SWQpXG4gICAgICBpZih1c2VyUXVlc3REYXRhKXtcbiAgICAgICAgdXNlclF1ZXN0RGF0YS5jb21wbGV0ZWQgPSB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIGxzY1F1ZXN0RXZlbnQuZW1pdChMU0NRVUVTVF9FVkVOVFMuUVVFU1RfQ09NUExFVEUsIGluZm8pXG4gIH0pXG5cbiAgcm9vbS5vbk1lc3NhZ2UoTFNDUVVFU1RfRVZFTlRTLlFVRVNUX0VORCwgKGluZm86YW55KT0+e1xuICAgIGNvbnNvbGUubG9nKCdlbmRlZCBxdWVzdCAnLCBpbmZvKVxuICAgIGxzY1F1ZXN0RXZlbnQuZW1pdChMU0NRVUVTVF9FVkVOVFMuUVVFU1RfRU5ELCBpbmZvKVxuICB9KVxuXG4gIHJvb20ub25NZXNzYWdlKExTQ1FVRVNUX0VWRU5UUy5RVUVTVF9VUERBVEUsIChpbmZvOmFueSk9PntcbiAgICBjb25zb2xlLmxvZygndXBkYXRlIHF1ZXN0ICcsIGluZm8pXG4gICAgbHNjUXVlc3RVc2VyRGF0YS5zZXQodXNlcklkLCBpbmZvKVxuICAgIGxzY1F1ZXN0RXZlbnQuZW1pdChMU0NRVUVTVF9FVkVOVFMuUVVFU1RfVVBEQVRFLCBpbmZvKVxuICB9KVxuXG4gIHJvb20ub25NZXNzYWdlKExTQ1FVRVNUX0VWRU5UUy5RVUVTVF9TVEVQX0NPTVBMRVRFLCAoaW5mbzphbnkpPT57XG4gICAgY29uc29sZS5sb2coJ3N0ZXAgY29tcGxldGUgcXVlc3QgJywgaW5mbylcbiAgICBcbiAgICAvLyBJZiB0aGUgc2VydmVyIHNlbnQgY29tcGxldGUgdXNlciBxdWVzdCBpbmZvLCB1c2UgaXQgZGlyZWN0bHlcbiAgICBpZiAoaW5mby51c2VyUXVlc3RJbmZvKSB7XG4gICAgICBsc2NRdWVzdFVzZXJEYXRhLnNldChpbmZvLnF1ZXN0SWQsIGluZm8udXNlclF1ZXN0SW5mbylcbiAgICB9XG4gICAgLy8gRmFsbGJhY2sgdG8gb2xkIGJlaGF2aW9yIGlmIHNlcnZlciBkb2Vzbid0IHNlbmQgY29tcGxldGUgZGF0YVxuICAgIGVsc2Uge1xuICAgICAgbGV0IHVzZXJRdWVzdERhdGEgPSBsc2NRdWVzdFVzZXJEYXRhLmdldChpbmZvLnF1ZXN0SWQpXG4gICAgICBpZih1c2VyUXVlc3REYXRhKXtcbiAgICAgICAgbGV0IHN0ZXAgPSB1c2VyUXVlc3REYXRhLnN0ZXBzLmZpbmQoKHN0ZXA6YW55KT0+c3RlcC5zdGVwSWQgPT09IGluZm8uc3RlcElkKVxuICAgICAgICBpZihzdGVwKXtcbiAgICAgICAgICBzdGVwLmNvbXBsZXRlZCA9IHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBsc2NRdWVzdEV2ZW50LmVtaXQoTFNDUVVFU1RfRVZFTlRTLlFVRVNUX1NURVBfQ09NUExFVEUsIGluZm8pXG4gIH0pXG5cbiAgcm9vbS5vbk1lc3NhZ2UoTFNDUVVFU1RfRVZFTlRTLlFVRVNUX1RBU0tfQ09NUExFVEUsIChpbmZvOmFueSk9PntcbiAgICBjb25zb2xlLmxvZygndGFzayBjb21wbGV0ZSBxdWVzdCAnLCBpbmZvKVxuICAgIFxuICAgIC8vIElmIHRoZSBzZXJ2ZXIgc2VudCBjb21wbGV0ZSB1c2VyIHF1ZXN0IGluZm8sIHVzZSBpdCBkaXJlY3RseVxuICAgIGlmIChpbmZvLnVzZXJRdWVzdEluZm8pIHtcbiAgICAgIGxzY1F1ZXN0VXNlckRhdGEuc2V0KGluZm8ucXVlc3RJZCwgaW5mby51c2VyUXVlc3RJbmZvKVxuICAgIH0gXG4gICAgLy8gRmFsbGJhY2sgdG8gb2xkIGJlaGF2aW9yIGlmIHNlcnZlciBkb2Vzbid0IHNlbmQgY29tcGxldGUgZGF0YVxuICAgIGVsc2Uge1xuICAgICAgbGV0IHVzZXJRdWVzdERhdGEgPSBsc2NRdWVzdFVzZXJEYXRhLmdldChpbmZvLnF1ZXN0SWQpXG4gICAgICBpZih1c2VyUXVlc3REYXRhKXtcbiAgICAgICAgbGV0IHN0ZXAgPSB1c2VyUXVlc3REYXRhLnN0ZXBzLmZpbmQoKHN0ZXA6YW55KT0+c3RlcC5zdGVwSWQgPT09IGluZm8uc3RlcElkKVxuICAgICAgICBpZihzdGVwKXtcbiAgICAgICAgICBsZXQgdGFzayA9IHN0ZXAudGFza3MuZmluZCgodGFzazphbnkpPT50YXNrLnRhc2tJZCA9PT0gaW5mby50YXNrSWQpXG4gICAgICAgICAgaWYodGFzayl7XG4gICAgICAgICAgICB0YXNrLmNvdW50KytcbiAgICAgICAgICAgIHRhc2suY29tcGxldGVkID0gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBsc2NRdWVzdEV2ZW50LmVtaXQoTFNDUVVFU1RfRVZFTlRTLlFVRVNUX1RBU0tfQ09NUExFVEUsIGluZm8pXG4gIH0pXG59XG5cbmxldCB0aW1lOm51bWJlciA9IDBcbmZ1bmN0aW9uIENoZWNrUGxheWVyU3lzdGVtKGR0Om51bWJlcil7XG4gIGlmKHRpbWUgPiAwKXtcbiAgICB0aW1lIC09IGR0XG4gIH1lbHNle1xuICAgIHBsYXllciA9IGdldFBsYXllcigpXG4gICAgaWYoIXBsYXllcil7XG4gICAgICB0aW1lID0gMVxuICAgIH1lbHNle1xuICAgICAgZW5naW5lLnJlbW92ZVN5c3RlbShDaGVja1BsYXllclN5c3RlbSlcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gQ29ubmVjdFF1ZXN0U3lzdGVtKCl7XG4gIGlmKCFwbGF5ZXIpIHJldHVyblxuICBjb25zb2xlLmxvZygnY29ubmVjdGluZyBxdWVzdCBzeXN0ZW0nKVxuXG4gIGlmKHBlbmRpbmdRdWVzdENvbm5lY3Rpb25zLmxlbmd0aCA+IDApe1xuICAgIGxldCBwZW5kaW5nUXVlc3RJZDpzdHJpbmcgPSBcIlwiICsgcGVuZGluZ1F1ZXN0Q29ubmVjdGlvbnMuc2hpZnQoKVxuICAgIG1ha2VRdWVzdENvbm5lY3Rpb24ocGVuZGluZ1F1ZXN0SWQpXG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gbWFrZVF1ZXN0Q29ubmVjdGlvbihxdWVzdElkOnN0cmluZyl7XG4gIGNvbnN0IHJlYWxtID0gYXdhaXQgZ2V0UmVhbG0oe30pXG5cbiAgY29uc3Qgb3B0aW9uczphbnkgPSB7XG4gICAgdXNlcklkOiBwbGF5ZXIudXNlcklkLFxuICAgIG5hbWU6IHBsYXllci5uYW1lLFxuICAgIHJlYWxtOiByZWFsbS5yZWFsbUluZm8/LmJhc2VVcmwsXG4gICAgcXVlc3RJZDogcXVlc3RJZCxcbiAgfVxuXG4gIGxldCBjbGllbnQgPSBuZXcgQ2xpZW50KERFQlVHID8gXG4gICAge2hvc3RuYW1lOidsb2NhbGhvc3QnLCBzZWN1cmU6ZmFsc2UsIHBvcnQ6NTM1M30gOiBcbiAgICB7aG9zdG5hbWU6J2FuZ3phYXItcGxhemEuZGNsLWl3Yi5jbycsIHBhdGhuYW1lOicvd3MnLCBzZWN1cmU6dHJ1ZX1cbiAgKVxuXG4gIHRyeSB7XG4gICAgY29uc3Qgcm9vbTogUm9vbSA9IGF3YWl0IGNsaWVudC5qb2luT3JDcmVhdGUoJ2FuZ3phYXJfcXVlc3RpbmcnLCBvcHRpb25zKVxuICAgIGxzY1F1ZXN0Q29ubmVjdGlvbnMuc2V0KHF1ZXN0SWQsIHJvb20pXG4gICAgc2V0TFNDUXVlc3RMaXN0ZW5lcnMocm9vbSwgcGxheWVyLnVzZXJJZClcblxuICAgIHJvb20ub25MZWF2ZSgoY29kZTpudW1iZXIsIHJlYXNvbj86c3RyaW5nKT0+e1xuICAgICAgY29uc29sZS5sb2coJ2xlZnQgcXVlc3Qgcm9vbScsIHF1ZXN0SWQsIGNvZGUsIHJlYXNvbilcbiAgICAgICAgbHNjUXVlc3RFdmVudC5lbWl0KExTQ1FVRVNUX0VWRU5UUy5RVUVTVF9ESVNDT05ORUNULCB7cXVlc3RJZCwgY29kZSwgcmVhc29ufSlcbiAgICB9KVxuICAgIHJldHVybiByb29tXG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjb25uZWN0aW5nIHRvIExTQyBRdWVzdCBTeXN0ZW0nLCBlcnJvcilcbiAgICB0aHJvdyBlcnJvclxuICB9XG59XG5cblxuLyoqXG4gKiBcbiAqIEBwYXJhbSBxdWVzdElkIFxuICogQHBhcmFtIHBvc2l0aW9uIFxuICogQHBhcmFtIHVwZGF0ZUludGVydmFsIFxuICogQHBhcmFtIGxpbWl0IFxuICogQHBhcmFtIG9yZGVyIFxuICogQHBhcmFtIHNvcnRCeSBcbiAqIEBwYXJhbSBjb21wbGV0ZWQgXG4gKiBAcGFyYW0gc2hvd0JhY2tncm91bmRcbiAqIEBwYXJhbSB0aXRsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gTFNDUXVlc3RMZWFkZXJib2FyZChcbiAgcXVlc3RJZDpzdHJpbmcsIFxuICB0cmFuc2Zvcm06VHJhbnNmb3JtVHlwZSwgXG4gIHVwZGF0ZUludGVydmFsOm51bWJlcixcbiAgbGltaXQ6bnVtYmVyLFxuICBvcmRlcjogJ2FzYycgfCAnYXNjJyA9ICdhc2MnLFxuICBzb3J0Qnk6c3RyaW5nID0gJ2VsYXBzZWRUaW1lJyxcbiAgY29tcGxldGVkOmJvb2xlYW4gPSB0cnVlLFxuICBzaG93QmFja2dyb3VuZDpib29sZWFuID0gdHJ1ZSxcbiAgdGl0bGU6c3RyaW5nID0gXCJMZWFkZXJib2FyZFwiXG4gICl7XG4gICAgXG4gIGxldCBsZWFkZXJib2FyZCA9IGVuZ2luZS5hZGRFbnRpdHkoKVxuICBUcmFuc2Zvcm0uY3JlYXRlKGxlYWRlcmJvYXJkLCB0cmFuc2Zvcm0pXG4gIFxuICAvLyBSb3cgZGltZW5zaW9uc1xuICBjb25zdCByb3dXaWR0aCA9IDNcbiAgY29uc3Qgcm93SGVpZ2h0ID0gMC40XG4gIFxuICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gZm9ybWF0IHRoZSBzY29yZSB0eXBlIGZvciBkaXNwbGF5XG4gIGZ1bmN0aW9uIGZvcm1hdFNjb3JlVHlwZSh0eXBlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmICh0eXBlID09PSAnZWxhcHNlZFRpbWUnKSByZXR1cm4gJ1RpbWUnO1xuICAgIHJldHVybiB0eXBlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdHlwZS5zbGljZSgxKTsgLy8gQ2FwaXRhbGl6ZSBmaXJzdCBsZXR0ZXJcbiAgfVxuICBcbiAgLy8gQ3JlYXRlIHRpdGxlXG4gIGNvbnN0IHRpdGxlRW50aXR5ID0gZW5naW5lLmFkZEVudGl0eSgpXG4gIFRyYW5zZm9ybS5jcmVhdGUodGl0bGVFbnRpdHksIHtcbiAgICBwYXJlbnQ6IGxlYWRlcmJvYXJkLFxuICAgIHBvc2l0aW9uOiBWZWN0b3IzLmNyZWF0ZSgwLCAwLjYsIDApXG4gIH0pXG4gIFRleHRTaGFwZS5jcmVhdGUodGl0bGVFbnRpdHksIHtcbiAgICB0ZXh0OiB0aXRsZSxcbiAgICBmb250U2l6ZTogMi41LFxuICAgIHRleHRBbGlnbjogVGV4dEFsaWduTW9kZS5UQU1fTUlERExFX0NFTlRFUlxuICB9KVxuICBcbiAgLy8gUm93IHBvc2l0aW9ucyAoY2VudGVyZWQpXG4gIGNvbnN0IGxlZnRQb3MgPSAtMS4yXG4gIGNvbnN0IGNlbnRlclBvcyA9IDBcbiAgY29uc3QgcmlnaHRQb3MgPSAxLjJcbiAgXG4gIC8vIENyZWF0ZSBoZWFkZXIgcm93XG4gIGNvbnN0IGhlYWRlckVudGl0eSA9IGVuZ2luZS5hZGRFbnRpdHkoKVxuICBUcmFuc2Zvcm0uY3JlYXRlKGhlYWRlckVudGl0eSwge1xuICAgIHBhcmVudDogbGVhZGVyYm9hcmQsXG4gICAgcG9zaXRpb246IFZlY3RvcjMuY3JlYXRlKDAsIDAuMiwgMClcbiAgfSlcbiAgXG4gIC8vIEhlYWRlciBiYWNrZ3JvdW5kXG4gIGNvbnN0IGhlYWRlckJnRW50aXR5ID0gZW5naW5lLmFkZEVudGl0eSgpXG4gIFRyYW5zZm9ybS5jcmVhdGUoaGVhZGVyQmdFbnRpdHksIHtcbiAgICBwYXJlbnQ6IGhlYWRlckVudGl0eSxcbiAgICBwb3NpdGlvbjogVmVjdG9yMy5jcmVhdGUoMCwgMCwgMC4wMyksXG4gICAgc2NhbGU6IFZlY3RvcjMuY3JlYXRlKHJvd1dpZHRoLCByb3dIZWlnaHQsIDEpXG4gIH0pXG4gIE1lc2hSZW5kZXJlci5zZXRQbGFuZShoZWFkZXJCZ0VudGl0eSlcbiAgTWF0ZXJpYWwuc2V0UGJyTWF0ZXJpYWwoaGVhZGVyQmdFbnRpdHksIHtcbiAgICBhbGJlZG9Db2xvcjogQ29sb3I0LmNyZWF0ZSgwLzI1NSwgMjU1LzI1NSwgMjEzLzI1NSwxKVxuICB9KVxuICBcbiAgLy8gSGVhZGVyIGxhYmVsc1xuICBjb25zdCByYW5rSGVhZGVyRW50aXR5ID0gZW5naW5lLmFkZEVudGl0eSgpXG4gIFRyYW5zZm9ybS5jcmVhdGUocmFua0hlYWRlckVudGl0eSwge1xuICAgIHBhcmVudDogaGVhZGVyRW50aXR5LFxuICAgIHBvc2l0aW9uOiBWZWN0b3IzLmNyZWF0ZShsZWZ0UG9zLCAwLCAwLjAyKVxuICB9KVxuICBUZXh0U2hhcGUuY3JlYXRlKHJhbmtIZWFkZXJFbnRpdHksIHtcbiAgICB0ZXh0OiBcIlJhbmtcIixcbiAgICBmb250U2l6ZTogMS41LFxuICAgIHRleHRBbGlnbjogVGV4dEFsaWduTW9kZS5UQU1fTUlERExFX0NFTlRFUlxuICB9KVxuICBcbiAgY29uc3QgbmFtZUhlYWRlckVudGl0eSA9IGVuZ2luZS5hZGRFbnRpdHkoKVxuICBUcmFuc2Zvcm0uY3JlYXRlKG5hbWVIZWFkZXJFbnRpdHksIHtcbiAgICBwYXJlbnQ6IGhlYWRlckVudGl0eSxcbiAgICBwb3NpdGlvbjogVmVjdG9yMy5jcmVhdGUoY2VudGVyUG9zIC0gMC40LCAwLCAwLjAyKVxuICB9KVxuICBUZXh0U2hhcGUuY3JlYXRlKG5hbWVIZWFkZXJFbnRpdHksIHtcbiAgICB0ZXh0OiBcIlBsYXllclwiLFxuICAgIGZvbnRTaXplOiAxLjUsXG4gICAgdGV4dEFsaWduOiBUZXh0QWxpZ25Nb2RlLlRBTV9NSURETEVfTEVGVFxuICB9KVxuICBcbiAgY29uc3Qgc2NvcmVIZWFkZXJFbnRpdHkgPSBlbmdpbmUuYWRkRW50aXR5KClcbiAgVHJhbnNmb3JtLmNyZWF0ZShzY29yZUhlYWRlckVudGl0eSwge1xuICAgIHBhcmVudDogaGVhZGVyRW50aXR5LFxuICAgIHBvc2l0aW9uOiBWZWN0b3IzLmNyZWF0ZShyaWdodFBvcywgMCwgMC4wMilcbiAgfSlcbiAgVGV4dFNoYXBlLmNyZWF0ZShzY29yZUhlYWRlckVudGl0eSwge1xuICAgIHRleHQ6IGZvcm1hdFNjb3JlVHlwZShzb3J0QnkpLFxuICAgIGZvbnRTaXplOiAxLjUsXG4gICAgdGV4dEFsaWduOiBUZXh0QWxpZ25Nb2RlLlRBTV9NSURETEVfQ0VOVEVSXG4gIH0pXG4gIFxuICAvLyBBcnJheSB0byBzdG9yZSByZWZlcmVuY2VzIHRvIGFsbCBsZWFkZXJib2FyZCBlbnRpdGllc1xuICBjb25zdCBsZWFkZXJib2FyZFJvd3M6IEFycmF5PHtcbiAgICByYW5rOiBudW1iZXIsXG4gICAgcm93RW50aXR5OiBFbnRpdHksXG4gICAgYmFja2dyb3VuZEVudGl0eTogRW50aXR5LFxuICAgIHJhbmtFbnRpdHk6IEVudGl0eSxcbiAgICBwcm9maWxlRW50aXR5OiBFbnRpdHksXG4gICAgbmFtZUVudGl0eTogRW50aXR5LFxuICAgIHNjb3JlRW50aXR5OiBFbnRpdHlcbiAgfT4gPSBbXVxuXG4gIC8vIENyZWF0ZSBwbGFjZWhvbGRlciByb3dzXG4gIGZvcihsZXQgaSA9IDA7IGkgPCBsaW1pdDsgaSsrKXtcbiAgICAvLyBDcmVhdGUgcm93IGNvbnRhaW5lciBlbnRpdHlcbiAgICBjb25zdCByb3dFbnRpdHkgPSBlbmdpbmUuYWRkRW50aXR5KClcbiAgICBUcmFuc2Zvcm0uY3JlYXRlKHJvd0VudGl0eSwge1xuICAgICAgcGFyZW50OiBsZWFkZXJib2FyZCxcbiAgICAgIHBvc2l0aW9uOiBWZWN0b3IzLmNyZWF0ZSgwLCAtaSAqIDAuNSAtIDAuMiwgMClcbiAgICB9KVxuICBcbiAgICAvLyBDcmVhdGUgYmFja2dyb3VuZCBlbnRpdHlcbiAgICBjb25zdCBiYWNrZ3JvdW5kRW50aXR5ID0gZW5naW5lLmFkZEVudGl0eSgpXG4gICAgaWYgKHNob3dCYWNrZ3JvdW5kKSB7XG4gICAgICBUcmFuc2Zvcm0uY3JlYXRlKGJhY2tncm91bmRFbnRpdHksIHtcbiAgICAgICAgcGFyZW50OiByb3dFbnRpdHksXG4gICAgICAgIHBvc2l0aW9uOiBWZWN0b3IzLmNyZWF0ZSgwLCAwLCAwLjAxKSxcbiAgICAgICAgc2NhbGU6IFZlY3RvcjMuY3JlYXRlKHJvd1dpZHRoLCByb3dIZWlnaHQsIDEpXG4gICAgICB9KVxuICAgICAgTWVzaFJlbmRlcmVyLnNldFBsYW5lKGJhY2tncm91bmRFbnRpdHkpXG4gICAgICBNYXRlcmlhbC5zZXRQYnJNYXRlcmlhbChiYWNrZ3JvdW5kRW50aXR5LCB7XG4gICAgICAgIGFsYmVkb0NvbG9yOiBpICUgMiA9PT0gMCA/IFxuICAgICAgICAgIENvbG9yNC5jcmVhdGUoMTgvMjU1LCAyMy8yNTUsMzcvMjU1LDEpIDpcbiAgICAgICAgICBDb2xvcjQuY3JlYXRlKDI2LzI1NSwzNC8yNTUsIDUzLzI1NSwgMSlcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIFRyYW5zZm9ybS5jcmVhdGUoYmFja2dyb3VuZEVudGl0eSwge1xuICAgICAgICBwYXJlbnQ6IHJvd0VudGl0eSxcbiAgICAgICAgc2NhbGU6IFZlY3RvcjMuWmVybygpXG4gICAgICB9KVxuICAgIH1cblxuICAgIC8vIENyZWF0ZSByYW5rIGVudGl0eSAoIzEsICMyLCBldGMuKVxuICAgIGNvbnN0IHJhbmtFbnRpdHkgPSBlbmdpbmUuYWRkRW50aXR5KClcbiAgICBUcmFuc2Zvcm0uY3JlYXRlKHJhbmtFbnRpdHksIHtcbiAgICAgIHBhcmVudDogcm93RW50aXR5LFxuICAgICAgcG9zaXRpb246IFZlY3RvcjMuY3JlYXRlKGxlZnRQb3MsIDAsIDApXG4gICAgfSlcbiAgICBUZXh0U2hhcGUuY3JlYXRlKHJhbmtFbnRpdHksIHt0ZXh0OmAjJHtpICsgMX1gLCBmb250U2l6ZToxLjV9KVxuXG4gICAgLy8gQ3JlYXRlIHByb2ZpbGUgaW1hZ2UgZW50aXR5XG4gICAgY29uc3QgcHJvZmlsZUVudGl0eSA9IGVuZ2luZS5hZGRFbnRpdHkoKVxuICAgIFRyYW5zZm9ybS5jcmVhdGUocHJvZmlsZUVudGl0eSwge1xuICAgICAgcGFyZW50OiByb3dFbnRpdHksXG4gICAgICBwb3NpdGlvbjogVmVjdG9yMy5jcmVhdGUoY2VudGVyUG9zIC0gMC44LCAwLCAwKSxcbiAgICAgIHNjYWxlOiBWZWN0b3IzLmNyZWF0ZSgwLjMsMC4zLDAuMylcbiAgICB9KVxuICAgIE1lc2hSZW5kZXJlci5zZXRQbGFuZShwcm9maWxlRW50aXR5KVxuICAgIE1hdGVyaWFsLnNldFBick1hdGVyaWFsKHByb2ZpbGVFbnRpdHksIHtcbiAgICAgIHRleHR1cmU6IE1hdGVyaWFsLlRleHR1cmUuQXZhdGFyKHtcbiAgICAgICAgdXNlcklkOiAnJyxcbiAgICAgIH0pLFxuICAgIH0pXG5cbiAgICAvLyBDcmVhdGUgbmFtZSBlbnRpdHlcbiAgICBjb25zdCBuYW1lRW50aXR5ID0gZW5naW5lLmFkZEVudGl0eSgpXG4gICAgVHJhbnNmb3JtLmNyZWF0ZShuYW1lRW50aXR5LCB7XG4gICAgICBwYXJlbnQ6IHJvd0VudGl0eSxcbiAgICAgIHBvc2l0aW9uOiBWZWN0b3IzLmNyZWF0ZShjZW50ZXJQb3MgLSAwLjQsIDAsIDApXG4gICAgfSlcbiAgICBUZXh0U2hhcGUuY3JlYXRlKG5hbWVFbnRpdHksIHt0ZXh0OmBOYW1lYCwgZm9udFNpemU6MS41LCAgdGV4dEFsaWduOiBUZXh0QWxpZ25Nb2RlLlRBTV9NSURETEVfTEVGVH0pXG5cbiAgICAvLyBDcmVhdGUgc2NvcmUgZW50aXR5XG4gICAgY29uc3Qgc2NvcmVFbnRpdHkgPSBlbmdpbmUuYWRkRW50aXR5KClcbiAgICBUcmFuc2Zvcm0uY3JlYXRlKHNjb3JlRW50aXR5LCB7XG4gICAgICBwYXJlbnQ6IHJvd0VudGl0eSxcbiAgICAgIHBvc2l0aW9uOiBWZWN0b3IzLmNyZWF0ZShyaWdodFBvcywgMCwgMClcbiAgICB9KVxuICAgIFRleHRTaGFwZS5jcmVhdGUoc2NvcmVFbnRpdHksIHt0ZXh0OmBTY29yZWAsIGZvbnRTaXplOjEuNX0pXG5cbiAgICAvLyBTdG9yZSByZWZlcmVuY2VzIHRvIGFsbCBlbnRpdGllc1xuICAgIGxlYWRlcmJvYXJkUm93cy5wdXNoKHtcbiAgICAgIHJhbms6IGkgKyAxLFxuICAgICAgcm93RW50aXR5LFxuICAgICAgYmFja2dyb3VuZEVudGl0eSxcbiAgICAgIHJhbmtFbnRpdHksXG4gICAgICBwcm9maWxlRW50aXR5LFxuICAgICAgbmFtZUVudGl0eSxcbiAgICAgIHNjb3JlRW50aXR5XG4gICAgfSlcbiAgfVxuXG4gIGxldCB0aW1lID0gMFxuICBmdW5jdGlvbiBsZWFkZXJib2FyZFVwZGF0ZShkdDpudW1iZXIpe1xuICAgIGlmKHRpbWUgPiAwKXtcbiAgICAgIHRpbWUgLT0gZHRcbiAgICB9ZWxzZXtcbiAgICAgIHRpbWUgPSB1cGRhdGVJbnRlcnZhbFxuICAgICAgdXBkYXRlTFNDUXVlc3RMZWFkZXJib2FyZCgpXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gdXBkYXRlTFNDUXVlc3RMZWFkZXJib2FyZCgpe1xuICAgIHRyeXtcbiAgICAgIC8vIEdldCBjdXJyZW50IHBsYXllciBpbmZvcm1hdGlvbiBmaXJzdFxuICAgICAgY29uc3QgcGxheWVyRGF0YSA9IGdldFBsYXllcigpO1xuICAgICAgY29uc3QgcGxheWVySUQgPSBwbGF5ZXJEYXRhID8gcGxheWVyRGF0YS51c2VySWQgOiAnJztcbiAgICAgIGNvbnN0IHBsYXllck5hbWUgPSBwbGF5ZXJEYXRhPy5uYW1lIHx8ICdZb3UnO1xuICAgICAgXG4gICAgICAvLyBEZWZpbmUgdGhlIHVzZXIgZGF0YSBpbnRlcmZhY2VcbiAgICAgIGludGVyZmFjZSBVc2VyRGF0YSB7XG4gICAgICAgIHVzZXJJZDogc3RyaW5nO1xuICAgICAgICBuYW1lOiBzdHJpbmc7XG4gICAgICAgIGVsYXBzZWRUaW1lOiBudW1iZXI7XG4gICAgICAgIGNvbXBsZXRlZDogYm9vbGVhbjtcbiAgICAgICAgW2tleTogc3RyaW5nXTogYW55OyAvLyBBbGxvdyBmb3IgZHluYW1pYyBwcm9wZXJ0aWVzIC8vXG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIEdldCBsZWFkZXJib2FyZCBkYXRhIGZyb20gQVBJXG4gICAgICBsZXQgcGFyYW1zID0gW2Bjb21wbGV0ZWQ9JHtjb21wbGV0ZWR9YCwgYG9yZGVyPSR7b3JkZXJ9YCwgYGxpbWl0PSR7bGltaXR9YCwgYHNvcnRCeT0ke3NvcnRCeX1gXVxuICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYGh0dHA6Ly9sb2NhbGhvc3Q6NTM1My9hcGkvcXVlc3RzLyR7cXVlc3RJZH0vdXNlcnM/YCArIHBhcmFtcy5qb2luKCcmJykpIFxuICAgICAgbGV0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKClcbiAgICAgIGNvbnNvbGUubG9nKCdsZWFkZXJib2FyZCBkYXRhOicsIGRhdGEpO1xuICAgICAgXG4gICAgICAvLyBVcGRhdGUgbGVhZGVyYm9hcmQgd2l0aCBkYXRhXG4gICAgICBmb3IobGV0IGkgPSAwOyBpIDwgbGVhZGVyYm9hcmRSb3dzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHJvdyA9IGxlYWRlcmJvYXJkUm93c1tpXVxuICAgICAgICBjb25zdCByb3dEYXRhID0gZGF0YVtpXVxuICAgICAgICBcbiAgICAgICAgaWYgKHJvd0RhdGEpIHtcbiAgICAgICAgICAvLyBTaG93IHRoaXMgcm93IGFuZCB1cGRhdGUgd2l0aCB1c2VyIGRhdGFcbiAgICAgICAgICBpZiAoIVRyYW5zZm9ybS5oYXMocm93LnJvd0VudGl0eSkpIGNvbnRpbnVlXG4gICAgICAgICAgXG4gICAgICAgICAgLy8gTWFrZSByb3cgdmlzaWJsZVxuICAgICAgICAgIFRyYW5zZm9ybS5nZXRNdXRhYmxlKHJvdy5yb3dFbnRpdHkpLnNjYWxlID0gVmVjdG9yMy5jcmVhdGUoMSwgMSwgMSlcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBPbmx5IHVwZGF0ZSBiYWNrZ3JvdW5kIGlmIGl0J3MgZW5hYmxlZFxuICAgICAgICAgIGlmIChzaG93QmFja2dyb3VuZCkge1xuICAgICAgICAgICAgVHJhbnNmb3JtLmdldE11dGFibGUocm93LmJhY2tncm91bmRFbnRpdHkpLnNjYWxlID0gVmVjdG9yMy5jcmVhdGUocm93V2lkdGgsIHJvd0hlaWdodCwgMSlcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gU2V0IHVzZXIgcmFuayAoIzEsICMyLCBldGMuKVxuICAgICAgICAgIGNvbnN0IHJhbmtUZXh0ID0gYCMke2kgKyAxfWBcbiAgICAgICAgICBUZXh0U2hhcGUuZ2V0TXV0YWJsZShyb3cucmFua0VudGl0eSkudGV4dCA9IHJhbmtUZXh0XG5cbiAgICAgICAgICBNYXRlcmlhbC5zZXRQYnJNYXRlcmlhbChyb3cucHJvZmlsZUVudGl0eSwge1xuICAgICAgICAgICAgdGV4dHVyZTogTWF0ZXJpYWwuVGV4dHVyZS5BdmF0YXIoe1xuICAgICAgICAgICAgICB1c2VySWQ6IHJvd0RhdGEudXNlcklkLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSlcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBTZXQgdXNlciBuYW1lXG4gICAgICAgICAgY29uc3QgbmFtZSA9IHJvd0RhdGEubmFtZSB8fCAnQW5vbnltb3VzJ1xuICAgICAgICAgIFRleHRTaGFwZS5nZXRNdXRhYmxlKHJvdy5uYW1lRW50aXR5KS50ZXh0ID0gbmFtZVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIFNldCB1c2VyIHNjb3JlICh0aW1lLCBwcm9ncmVzcywgZXRjLilcbiAgICAgICAgICBsZXQgc2NvcmVUZXh0ID0gJydcbiAgICAgICAgICBpZiAoc29ydEJ5ID09PSAnZWxhcHNlZFRpbWUnKSB7XG4gICAgICAgICAgICAvLyBGb3JtYXQgdGltZSBkaXNwbGF5XG4gICAgICAgICAgICBjb25zdCBtcyA9IHJvd0RhdGEuZWxhcHNlZFRpbWUgKiAxMDAwXG4gICAgICAgICAgICBjb25zdCBzZWNvbmRzID0gTWF0aC5mbG9vcihtcyAvIDEwMDApXG4gICAgICAgICAgICBjb25zdCBtaW51dGVzID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gNjApXG4gICAgICAgICAgICBjb25zdCBob3VycyA9IE1hdGguZmxvb3IobWludXRlcyAvIDYwKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoaG91cnMgPiAwKSB7XG4gICAgICAgICAgICAgIHNjb3JlVGV4dCA9IGAke2hvdXJzfWggJHttaW51dGVzICUgNjB9bWBcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWludXRlcyA+IDApIHtcbiAgICAgICAgICAgICAgc2NvcmVUZXh0ID0gYCR7bWludXRlc31tICR7c2Vjb25kcyAlIDYwfXNgXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzY29yZVRleHQgPSBgJHtzZWNvbmRzfXNgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEZvciBvdGhlciBzY29yZSB0eXBlc1xuICAgICAgICAgICAgc2NvcmVUZXh0ID0gcm93RGF0YVtzb3J0QnldPy50b1N0cmluZygpIHx8ICcwJ1xuICAgICAgICAgIH1cblxuICAgICAgICAgIFRleHRTaGFwZS5nZXRNdXRhYmxlKHJvdy5zY29yZUVudGl0eSkudGV4dCA9IHNjb3JlVGV4dFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEhpZGUgdGhpcyByb3cgYXMgdGhlcmUncyBubyBkYXRhXG4gICAgICAgICAgaWYgKFRyYW5zZm9ybS5oYXMocm93LnJvd0VudGl0eSkpIHtcbiAgICAgICAgICAgIFRyYW5zZm9ybS5nZXRNdXRhYmxlKHJvdy5yb3dFbnRpdHkpLnNjYWxlID0gVmVjdG9yMy5aZXJvKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gT25seSB1cGRhdGUgYmFja2dyb3VuZCBpZiBpdCdzIGVuYWJsZWRcbiAgICAgICAgICAgIGlmIChzaG93QmFja2dyb3VuZCkge1xuICAgICAgICAgICAgICBUcmFuc2Zvcm0uZ2V0TXV0YWJsZShyb3cuYmFja2dyb3VuZEVudGl0eSkuc2NhbGUgPSBWZWN0b3IzLlplcm8oKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2goZTphbnkpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdlcnJvciB1cGRhdGluZyBxdWVzdCBsZWFkZXJib2FyZCcsIGUpXG4gICAgfVxuICB9XG5cbiAgZW5naW5lLmFkZFN5c3RlbShsZWFkZXJib2FyZFVwZGF0ZSlcblxuICAvLyBSZWFjdEVjc1JlbmRlcmVyLnNldFVpUmVuZGVyZXIodWlDb21wb25lbnQpXG59Il19