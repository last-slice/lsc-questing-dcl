const CLASSNAME = "XMLHttpRequest";
export class XMLHttpRequest {
    constructor() {
        this.requestHeaders = {};
        const METHOD_NAME = "constructor";
        console.log(CLASSNAME, METHOD_NAME, "ENTRY");
    }
    getAllResponseHeaders() {
        return this.responseHeadersRaw;
    }
    setRequestHeader(key, val) {
        const METHOD_NAME = "setRequestHeader";
        console.log(CLASSNAME, METHOD_NAME, "ENTRY", key, val);
        this.requestHeaders[key] = val;
    }
    open(method, url) {
        const METHOD_NAME = "open";
        console.log(CLASSNAME, METHOD_NAME, "ENTRY", method, url);
        this.method = method;
        this.url = url;
    }
    send(data) {
        const METHOD_NAME = "send";
        console.log(CLASSNAME, METHOD_NAME, "ENTRY", data);
        if (!this.url) {
            throw new Error("url is required");
        }
        if (!this.method) {
            throw new Error("method is required");
        }
        fetch(this.url, {
            method: this.method,
            headers: this.requestHeaders,
            body: data,
            timeout: this.timeout
        }).then(async (val) => {
            console.log(CLASSNAME, METHOD_NAME, "PROMISE.ENTRY", val);
            this.status = val.status;
            this.statusText = val.statusText;
            this.response = await val.text();
            this.responseHeadersRaw = "";
            val.headers.forEach((value, key) => {
                this.responseHeadersRaw += key + ": " + value + "\r\n";
            });
            console.log(CLASSNAME, METHOD_NAME, "PROMISE.RESULT", "this.status", this.status, "this.responseHeadersRaw", this.responseHeadersRaw);
            if (this.onload)
                this.onload();
        }).catch((reason) => {
            console.log('catching reason', reason);
            if (reason.code && (reason.code == 20 || reason.code == 23))
                reason.type = 'timeout';
            if (this.onerror) {
                this.onerror(reason);
                console.log("on error reason", reason);
            }
        });
    }
}
//# sourceMappingURL=data:application/json;base64,