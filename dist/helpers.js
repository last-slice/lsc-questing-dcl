import { UiCanvasInformation, engine } from "@dcl/sdk/ecs";
import { Color4 } from "@dcl/sdk/math";
export let dimensions = {
    width: 0,
    height: 0
};
let timer = 0;
export function uiSizer(dt) {
    if (timer > 0) {
        timer -= dt;
    }
    else {
        timer = 3;
        let canvas = UiCanvasInformation.get(engine.RootEntity);
        dimensions.aspect = canvas.devicePixelRatio;
        dimensions.width = canvas.width;
        dimensions.height = canvas.height;
    }
}
export function calculateImageDimensions(width, aspectRatio) {
    const desiredWidth = width / 100 * dimensions.width;
    const desiredHeight = desiredWidth / aspectRatio;
    return { width: desiredWidth, height: desiredHeight };
}
export function calculateSquareImageDimensions(percentage) {
    const minDimension = Math.min(dimensions.width, dimensions.height);
    const squareSize = (minDimension * percentage) / 100;
    return { width: squareSize, height: squareSize };
}
export function addLineBreak(text, bubble, lineCount, large) {
    return lineBreak(text, lineCount);
}
function lineBreak(text, maxLineLength) {
    const words = text.split(' ');
    let currentLine = '';
    const lines = [];
    for (const word of words) {
        if (currentLine.length + word.length + 1 <= maxLineLength) {
            currentLine += `${word} `;
        }
        else {
            lines.push(currentLine.trim());
            currentLine = `${word} `;
        }
    }
    lines.push(currentLine.trim());
    return lines.join('\n');
}
export function sizeFont(large, small) {
    return dimensions.width > 2000 ? large : small;
}
export function getImageAtlasMapping(data) {
    if (!data)
        return [];
    const { atlasWidth, atlasHeight, sourceWidth, sourceHeight, sourceTop, sourceLeft, } = data;
    return [
        sourceLeft / atlasWidth, (atlasHeight - sourceTop - sourceHeight) / atlasHeight,
        sourceLeft / atlasWidth, (atlasHeight - sourceTop) / atlasHeight,
        (sourceLeft + sourceWidth) / atlasWidth, (atlasHeight - sourceTop) / atlasHeight,
        (sourceLeft + sourceWidth) / atlasWidth, (atlasHeight - sourceTop - sourceHeight) / atlasHeight,
    ];
}
export function getAspect(panel) {
    return panel.sourceWidth / panel.sourceHeight;
}
export function getUITransform(component, entiy, height = 100, width = 100, unit = 2) {
    let uiTransformComponent = component.getMutableOrNull(entiy);
    if (!uiTransformComponent) {
        uiTransformComponent = component.create(entiy);
        uiTransformComponent.heightUnit = unit;
        uiTransformComponent.widthUnit = unit;
        uiTransformComponent.height = height;
        uiTransformComponent.width = width;
        uiTransformComponent.maxHeightUnit = unit;
        uiTransformComponent.maxWidthUnit = unit;
        uiTransformComponent.maxHeight = height;
        uiTransformComponent.maxWidth = width;
    }
    if (entiy === 0) {
        uiTransformComponent.positionType = 1;
    }
    return uiTransformComponent;
}
export function getRandomColor4(alpha) {
    return Color4.create(Math.random(), Math.random(), Math.random(), alpha ? alpha : Math.random());
}
//# sourceMappingURL=data:application/json;base64,